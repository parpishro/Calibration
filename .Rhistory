kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = set_hyperPriors(), showProgress = T)
prs    <- set_hyperPriors(thetaSDist  = "logbeta",      thetaSP1  = 5,  thetaSP2 = 5,
alphaSDist  = "fixed",        alphaSP1  = 2,
thetaBDist  = "logbeta",      thetaBP1  = 5,  thetaBP2 = 5,
alphaBDist  = "fixed",        alphaBP1  = 2,
sigma2SDist = "inversegamma", sigma2SP1 = 5,  sigma2SP2 = 5,
sigma2BDist = "inversegamma", sigma2BP1 = 12,  sigma2BP2 = 2,
sigma2EDist = "inversegamma", sigma2EP1 = 1,  sigma2EP2 = 0.01,
muBDist     = "fixed",        muBP1     = 0)
pn <- build_prior("beta", 1.1, 1.1)
fn <- pn$fun
plot(seq(0,3, by=0.01), exp(fn(seq(0,3, by=0.01))), type = "l")
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
pn$mean
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
X     <- matrix(c(1, 3, 5,
2, 2, 6,
1, 4, 1), nrow = 3, byrow = TRUE)
Y     <- matrix(c(7, 3, 0,
2, 2, 4), nrow = 2, byrow = TRUE)
sc    <- c(1, 2, 3) # scale parameters of correlation structure
sm    <- c(2, 1, 2) # smoothness parameters of correlation structure
Z <- exp(-rowSums(theta * (abs(X-Y)^alpaha)))
Z <- exp(-rowSums(sc * (abs(X-Y)^sm)))
X - Y
c(1,2,3) * X
X
c(1,2,3) * c(2,2,5)
row(X)
row(Y)
for (r in row(X)) print(sum(r))
X
R <- matrix(nrow = 2, ncol = 3)
R
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
View(AugCov)
exp(X)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
load_all()
calMod <- calibrate(sim = ballSim, field = ballField, showProgress = T)
save(calMod, file = "inst/calMod.rda")
load_all()
library(FBC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ">"
)
options(width = 100)
library(FBC)
head(ballField, 3)
dim(ballField)
head(ballSim, 3)
dim(ballSim)
plot(ballField[, 2], ballField[, 1], cex = 0.65, pch = 19, col = "red", ylim = c(0, 1.5),
xlab = "Height (m)", ylab = "Time (s)")
points(ballSim[, 2], ballSim[, 1], cex = 0.65, pch = 19, col = "blue")
legend("topleft", legend = c("Simulation", "Field"),
col = c("blue", "red"), pch = 16, cex = 0.8)
calMod_path <- system.file("calMod.rda", package = "FBC", mustWork = TRUE)
load(calMod_path)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ">"
)
options(width = 100)
library(FBC)
head(ballField, 3)
dim(ballField)
head(ballSim, 3)
dim(ballSim)
plot(ballField[, 2], ballField[, 1], cex = 0.65, pch = 19, col = "red", ylim = c(0, 1.5),
xlab = "Height (m)", ylab = "Time (s)")
points(ballSim[, 2], ballSim[, 1], cex = 0.65, pch = 19, col = "blue")
legend("topleft", legend = c("Simulation", "Field"),
col = c("blue", "red"), pch = 16, cex = 0.8)
calMod_path <- system.file("calMod.rda", package = "FBC", mustWork = TRUE)
load(calMod_path)
names(calMod)
head(calMod$Phi, 3)
predsMAP   <- predict(object = calMod, newdata = matrix(c(2.2, 2.4), ncol = 1), method = "MAP")
predsBayes <- predict(object = calMod, newdata = matrix(c(2.2, 2.4), ncol = 1), method = "Bayesian")
predsMAP
predsBayes
priors <- set_hyperPriors(thetaSDist = "beta", thetaBP2 = 6)
calModSum <- summary(calMod)
print(calMod)
# Note that there are two correlation scale parameters in simulator GP and there will be two plots
plot(calMod, parameter = "thetaS")
# Note that there are two correlation smoothness parameters in simulator GP and there will be
# two plots
plot(calMod, parameter = "alphaS", type = "trace")
# Plots the fitted values versus all experimental inputs along with actual values in separate plots
plot(calMod, type = "fits", xlab = "height")
X     <- matrix(c(1, 3, 5,
2, 2, 6,
1, 4, 1), nrow = 3, byrow = TRUE)
Y     <- matrix(c(7, 3, 0,
2, 2, 4), nrow = 2, byrow = TRUE)
sc    <- c(1, 2, 3) # scale parameters of correlation structure
sm    <- c(2, 1, 2) # smoothness parameters of correlation structure
# correlation of a matrix with itself
round(correlation(X, theta = sc, alpha = sm), 5)
# correlation between two matrices
round(correlation(X, Y, theta = sc, alpha = sm), 5)
# create a prior function for beta(2, 5). Note that the function compute log of priors and must be transformed
pr_fun <- build_prior(dist = "beta", p1 = 2, p2 = 5)
round(exp(pr_fun(c(-1, 0, 0.1, 0.5, 0.9, 1, 2))), 3)
# create a prior function for beta(2, 5). Note that the function compute log of priors and must be transformed
pr_fun <- build_prior(dist = "beta", p1 = 2, p2 = 5)$fun
round(exp(pr_fun(c(-1, 0, 0.1, 0.5, 0.9, 1, 2))), 3)
# create a prior function for a Uniform distribution with lower bound of -10, and upper bound of 10
pr_fun <- build_prior(dist = "uniform", p1 = -10, p2 = 10)$fun
round(exp(pr_fun(c(-11, -5, 0, 4, 10, 12))), 3)
# create a prior function for Gaussian distribution with mean of 1 and standard deviation of 2
pr_fun <- build_prior(dist = "normal", p1 = 1, p2 = 2)$fun
round(exp(pr_fun(c(-9, -5, -3, -1, 1, 3, 5, 7, 11))), 3)
# find the estimated mode of a vector
vec <- runif(100, 0, 10)
pmode(vec)
pmode(vec, breaks = 10)
priors    <- set_hyperPriors(thetaSDist  = "logbeta",      thetaSP1  = 5,  thetaSP2 = 5,
alphaSDist  = "fixed",        alphaSP1  = 2,
thetaBDist  = "logbeta",      thetaBP1  = 5,  thetaBP2 = 5,
alphaBDist  = "fixed",        alphaBP1  = 2,
sigma2SDist = "inversegamma", sigma2SP1 = 5,  sigma2SP2 = 0.2,
sigma2BDist = "inversegamma", sigma2BP1 = 12, sigma2BP2 = 0.5,
sigma2EDist = "inversegamma", sigma2EP1 = 5,  sigma2EP2 = 100,
muBDist     = "fixed",        muBP1     = 0)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normal", kappaP1 = 0.5, kappaP2 = 0.25, hypers = proiors)
priors    <- set_hyperPriors(thetaSDist  = "logbeta",      thetaSP1  = 5,  thetaSP2 = 5,
alphaSDist  = "fixed",        alphaSP1  = 2,
thetaBDist  = "logbeta",      thetaBP1  = 5,  thetaBP2 = 5,
alphaBDist  = "fixed",        alphaBP1  = 2,
sigma2SDist = "inversegamma", sigma2SP1 = 5,  sigma2SP2 = 0.2,
sigma2BDist = "inversegamma", sigma2BP1 = 12, sigma2BP2 = 0.5,
sigma2EDist = "inversegamma", sigma2EP1 = 5,  sigma2EP2 = 100,
muBDist     = "fixed",        muBP1     = 0)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
crossprod(c(1,2,3))
X     <- matrix(c(1, 3, 5,
2, 2, 6,
1, 4, 1), nrow = 3, byrow = TRUE)
Y     <- matrix(c(7, 3, 0,
2, 2, 4), nrow = 2, byrow = TRUE)
sc    <- c(1, 2, 3) # scale parameters of correlation structure
sm    <- c(2, 1, 2) # smoothness parameters of correlation structure
crossprod(X, Y)
crossprod(Y, X)
crossprod(sc, X)
crossprod(sc, Y)
crossprod(Y, X)
crossprod(sc, X)
crossprod(X, sc)
X
setClass("Class", slots = c(name = "type"))
sc
X
crossprod(X, Y[1,])
crossprod(X, sc)
crossprod(sc. X)
crossprod(sc, X)
sc
X
crossprod(X, sc)
tcrossprod(X, sc)
tcrossprod(X, t(sc))
crossprod(X, t(sc))
crossprod(t(sc), X)
crossprod(sc, X)
crossprod(sc, t(X))
tcrossprod(X, t(sc))
X
X - Y[1, ]
Y[1, ]
X
X - t(Y[1, ])
Y
t(Y[1, ])
Y[1, ]
tcrossprod(X, t(sc))
tcrossprod(X, t(sc))^c(1,2,3)
B <- matrix(nrow = 5, ncol = 3)
B[2, ] <- tcrossprod(X, t(sc))^c(1,2,3)
B
X
X^c(1,2,3)
X^t(c(1,2,3))
X^matrix(c(1,2,3), ncol=1)
X^matrix(c(1,2,3), nrow=1)
abs(Y - X[1,])
Y
X[1,]
X[1, , drop = F]
X
X[1,]
Y
abs(Y - X[1, , drop = F])
X
X - c(1,2,3)
X - t(c(1,2,3))
X[1,]
X[1,,drop=F]
Y
abs(X[1, , drop = F] - Y)
abs(t(Y) - X[1, , drop = F])
abs(Y - X[1, , drop = F])
apply(Y, 1, function(y) y - X[i, ])
apply(Y, 1, function(y) y - X[1, ])
Y
X[1, ]
apply(Y, 1, function(y) abs(y - X[1, ])^alpha)
YY <- t(Y)
tcrossprod(YY, X)
tcrossprod(Y, X)
tcrossprod(YY, sc)
tcrossprod(YY, t(sc))
tcrossprod(Y, t(sc))
Y
sc
crossprod(YY, t(sc))
crossprod(YY, sc)
YY
sc
load_all()
X     <- matrix(c(1, 3, 5,
2, 2, 6,
1, 4, 1), nrow = 3, byrow = TRUE)
Y     <- matrix(c(7, 3, 0,
2, 2, 4), nrow = 2, byrow = TRUE)
sc    <- c(1, 2, 3) # scale parameters of correlation structure
sm    <- c(2, 1, 2) # smoothness parameters of correlation structure
# correlation of a matrix with itself
correlation(X, theta = sc, alpha = sm)
load_all()
X     <- matrix(c(1, 3, 5,
2, 2, 6,
1, 4, 1), nrow = 3, byrow = TRUE)
Y     <- matrix(c(7, 3, 0,
2, 2, 4), nrow = 2, byrow = TRUE)
sc    <- c(1, 2, 3) # scale parameters of correlation structure
sm    <- c(2, 1, 2) # smoothness parameters of correlation structure
# correlation of a matrix with itself
correlation(X, theta = sc, alpha = sm)
# correlation between two matrices
correlation(X, Y, theta = sc, alpha = sm)
load_all()
X     <- matrix(c(1, 3, 5,
2, 2, 6,
1, 4, 1), nrow = 3, byrow = TRUE)
Y     <- matrix(c(7, 3, 0,
2, 2, 4), nrow = 2, byrow = TRUE)
sc    <- c(1, 2, 3) # scale parameters of correlation structure
sm    <- c(2, 1, 2) # smoothness parameters of correlation structure
# correlation of a matrix with itself
correlation(X, theta = sc, alpha = sm)
# correlation between two matrices
correlation(X, Y, theta = sc, alpha = sm)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
apply(Y, 1, function(y) abs(y - X[1, ])^sm)
apply(Y, 2, function(y) abs(y - X[1, ])^sm)
apply(Y, 1, function(y) abs(y - X[1, ])^sm)
R <- matrix(nrow = nrow(X), ncol = nrow(Y))
for (i in 1:nrow(Y)) R[i, ] <- abs(yY[i, ] - X[i, ])^sm
for (i in 1:nrow(Y)) R[i, ] <- abs(Y[i, ] - X[i, ])^sm
for (i in 1:nrow(Y)) R[i, ] <- abs(Y[i, ] - X[1, ])^sm
abs(Y[1, ] - X[1, ])^sm
X[1, ]
Y[1, ]
sm
for (i in 1:nrow(Y)) R[i, ] <- abs(Y[i, ] - X[1, ])^sm
for (i in 1:nrow(Y)) print(abs(Y[i, ] - X[1, ])^sm)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
apply(Y, 1, function(y) abs(y - X[1, ])^sm)
Y
X[1, ]
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
apply(Y, 1, function(y) abs(y - X[1, ])^sm)
Y
X[1,]
sm
})
crossprod(apply(Y, 1, function(y) abs(y - X[1, ])^sm), t(sc))
crossprod(apply(Y, 1, function(y) abs(y - X[1, ])^sm), sc)
apply(Y, 1, function(y) abs(y - X[1, ])^sm)
sc
crossprod(apply(Y, 1, function(y) abs(y - X[1, ])^sm), sc)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
Y
crossprod(t(Y), sc)
Y
sc
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors)
library(FBC)
head(ballField, 3)
dim(ballField)
head(ballSim, 3)
dim(ballSim)
plot(ballField[, 2], ballField[, 1], cex = 0.65, pch = 19, col = "red", ylim = c(0, 1.5),
xlab = "Height (m)", ylab = "Time (s)")
points(ballSim[, 2], ballSim[, 1], cex = 0.65, pch = 19, col = "blue")
legend("topleft", legend = c("Simulation", "Field"),
col = c("blue", "red"), pch = 16, cex = 0.8)
calMod_path <- system.file("calMod.rda", package = "FBC", mustWork = TRUE)
load(calMod_path)
names(calMod)
head(calMod$Phi, 3)
names(calMod)
predsMAP   <- predict(object = calMod, newdata = matrix(c(2.2, 2.4), ncol = 1), method = "MAP")
knitr::opts_chunk$set(
collapse = TRUE,
comment = ">"
)
options(width = 100)
library(FBC)
head(ballField, 3)
dim(ballField)
head(ballSim, 3)
dim(ballSim)
plot(ballField[, 2], ballField[, 1], cex = 0.65, pch = 19, col = "red", ylim = c(0, 1.5),
xlab = "Height (m)", ylab = "Time (s)")
points(ballSim[, 2], ballSim[, 1], cex = 0.65, pch = 19, col = "blue")
legend("topleft", legend = c("Simulation", "Field"),
col = c("blue", "red"), pch = 16, cex = 0.8)
calMod_path <- system.file("calMod.rda", package = "FBC", mustWork = TRUE)
load(calMod_path)
names(calMod)
head(calMod$Phi, 3)
predsMAP   <- predict(object = calMod, newdata = matrix(c(2.2, 2.4), ncol = 1), method = "MAP")
calMod$estimates
plot(analytic1)
plot(analytic1, type = "fits")
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
rm(analytic1, AugCov, B, calMod, R, X, Y, YY, calMod_path, i, sc, sm)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
rm(AugCov)
load_all()
library(FBC)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
library(FBC)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
priors <- set_hyperPriors(thetaSDist    = "logbeta",      thetaSP1  = 5,  thetaSP2  = 5,
alphaSDist  = "fixed",         alphaSP1  = 2,
thetaBDist  = "logbeta",      thetaBP1  = 5,  thetaBP2  = 5,
alphaBDist  = "fixed",        alphaBP1  = 2,
sigma2SDist = "inversegamma", sigma2SP1 = 5,  sigma2SP2 = 5,
sigma2BDist = "inversegamma", sigma2BP1 = 12, sigma2BP2 = 2,
sigma2EDist = "inversegamma", sigma2EP1 = 1,  sigma2EP2 = 0.01,
muBDist     = "fixed",        muBP1     = 0)
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
View(AugCov)
load_all()
analytic1 <- calibrate(analytic11S, analytic11F, nMCMC = 15000, nBurn = 5000,
kappaDist = "normalTr", kappaP1 = 0.5, kappaP2 = 0.25,
hypers = priors, showProgress = T)
library(FBC)
load_all()
document()
load_all()
document()
load_all()
document()
